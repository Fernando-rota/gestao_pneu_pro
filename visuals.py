
# -*- coding: utf-8 -*-
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from typing import Optional
from config import COLORS, THRESHOLDS

def hist_sulco(df: pd.DataFrame):
    return px.histogram(df, x="Aferi√ß√£o - Sulco", nbins=20, color="Tipo Ve√≠culo", title="Distribui√ß√£o de Sulco")

def box_sulco_por_tipo(df: pd.DataFrame):
    return px.box(df, x="Tipo Ve√≠culo", y="Aferi√ß√£o - Sulco", title="Sulco por Tipo de Ve√≠culo")

def barras_condicao(df: pd.DataFrame):
    order = ["üî¥ Cr√≠tico","üü° Alerta","üü¢ Ok"]
    c = df["Condi√ß√£o"].value_counts().reindex(order).fillna(0).astype(int).reset_index()
    c.columns = ["Condi√ß√£o","Quantidade"]
    fig = px.bar(c, x="Condi√ß√£o", y="Quantidade", title="Pneus por Condi√ß√£o", text="Quantidade")
    fig.update_traces(textposition="outside")
    return fig

def scatter_km_restante(df: pd.DataFrame):
    if "Km Restante (estimado)" not in df.columns: return go.Figure()
    return px.scatter(
        df,
        x="Km Rodado at√© Aferi√ß√£o",
        y="Km Restante (estimado)",
        color="Condi√ß√£o",
        hover_data=[c for c in ["Refer√™ncia","Ve√≠culo - Placa","Modelo (Atual)","Vida"] if c in df.columns],
        title="Km Restante (estimado) vs Km j√° Rodado"
    )

def heatmap_posicao(df: pd.DataFrame, x_col: str = "X", y_col: str = "Y", label_col: str = "Sigla da Posi√ß√£o"):
    # Requer que df contenha colunas (x_col, y_col) vindas da aba 'posi√ß√£o' (merge realizado no ETL)
    if not set([x_col, y_col, label_col]).issubset(df.columns):
        return go.Figure()
    # Definir cor por condi√ß√£o
    color_map = {"üî¥ Cr√≠tico": COLORS.critico, "üü° Alerta": COLORS.alerta, "üü¢ Ok": COLORS.ok}
    df_plot = df.copy()
    df_plot["Cor"] = df_plot["Condi√ß√£o"].map(color_map).fillna(COLORS.neutro)
    # Agregar por posi√ß√£o (pegar pior condi√ß√£o da posi√ß√£o)
    ordem = {"üî¥ Cr√≠tico": 0, "üü° Alerta": 1, "üü¢ Ok": 2}
    df_plot["ordem"] = df_plot["Condi√ß√£o"].map(ordem).fillna(3)
    pos = df_plot.sort_values("ordem").drop_duplicates(label_col)  # pior primeiro
    fig = go.Figure()
    fig.add_trace(go.Scatter(
        x=pos[x_col], y=pos[y_col],
        mode="markers+text",
        marker=dict(size=40, color=pos["Cor"], line=dict(color="#444", width=1)),
        text=pos[label_col],
        textposition="middle center",
        hovertext=[f"{r[label_col]} ‚Äî {r.get('Condi√ß√£o','?')}" for _, r in pos.iterrows()],
        hoverinfo="text"
    ))
    fig.update_layout(
        title="Mapa de Posi√ß√µes do Ve√≠culo (pior condi√ß√£o por posi√ß√£o)",
        xaxis=dict(visible=False), yaxis=dict(visible=False),
        plot_bgcolor="#ffffff", paper_bgcolor="#ffffff",
        height=400, margin=dict(l=10,r=10,t=50,b=10)
    )
    return fig
